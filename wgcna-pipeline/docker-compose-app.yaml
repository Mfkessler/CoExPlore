services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-wgcna}
    networks:
      - app-network

  redis:
    image: redis:6.0-alpine
    networks:
      - app-network

  db_setup:
    image: wgcna_image:pipeline
    container_name: db_setup
    env_file:
      - .env
    volumes:
      - ./wgcna-app:/wgcna-app
      - ./output:/wgcna-pipeline/output
      - ./scripts/generate_db.py:/wgcna-pipeline/generate_db.py
      - ./scripts/wait_for_postgres.py:/wgcna-pipeline/wait_for_postgres.py
    working_dir: /wgcna-pipeline
    command: >
      bash -c "python wait_for_postgres.py && python generate_db.py && touch /wgcna-pipeline/output/db_done.txt"

    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  web:
    image: wgcna_image:pipeline
    container_name: flask_app
    env_file:
      - .env
    volumes:
      - ./wgcna-app:/wgcna-app
      - ./output:/wgcna-pipeline/output
    working_dir: /wgcna-app
    command: >
      bash -c "
        while [ ! -f /wgcna-pipeline/output/db_done.txt ]; do
          echo 'Waiting for DB setup to finish...'
          sleep 30
        done;
        flask run --host=0.0.0.0 --port=5000
      "
    ports:
      - "5000:5000"
    depends_on:
      - db_setup
      - redis
    networks:
      - app-network

  worker:
    image: wgcna_image:pipeline
    container_name: celery_worker
    env_file:
      - .env
    volumes:
      - ./wgcna-app:/wgcna-app
      - ./output:/wgcna-pipeline/output
    working_dir: /wgcna-app
    command: >
      bash -c "
        while [ ! -f /wgcna-pipeline/output/db_done.txt ]; do
          echo 'Waiting for DB setup to finish...'
          sleep 30
        done;
        celery -A app.celery worker --loglevel=debug
      "
    depends_on:
      - db_setup
      - redis
    networks:
      - app-network

networks:
  app-network:
