import os
import sys
import matplotlib.pyplot as plt

configfile: "config.yml"

plt.rcParams['savefig.bbox'] = 'tight'
plt.rcParams['axes.labelsize'] = 10

species = config["species"]
name = config["name"]
count_matrix = config["count_matrix"]
sample_mapping = config["sample_mapping"]
iprid = config["iprid"]
goid = config["goid"]
orthogroups = config["orthogroups"]

save_tom = config["save_tom"]
save_adjacency_matrix = config["save_adjacency_matrix"]
save_WGCNA = config["save_WGCNA"]
figure_type = config["figure_type"]
reduce_matrix = config["reduce_matrix"]

output_path = config["output_path"].format(name=name)
output_path = f"{output_path}/" if not output_path.endswith("/") else output_path
H5AD_PATH = f"{output_path}h5ad/"
TOM_PATH = f"{output_path}tom/"

# New output path
output_path = f"{output_path}{name}/"

app_path = config["app_path"]

os.makedirs(output_path, exist_ok=True)

MATRIX_FILE = f"{output_path}{name}_matrix.csv"
H5AD_FILE = f"{output_path}{name}.h5ad"
TOM_FILE = f"{output_path}tom_matrix.h5"
FIGURES_DIR = f"{output_path}figures"

# Final positions after reorganization
FINAL_H5AD = f"{H5AD_PATH}{name}.h5ad"
FINAL_TOM = f"{TOM_PATH}tom_matrix_{name}.h5"
FINAL_FIGURES_DIR = f"{app_path}/app/static/images/{name}"
REORGANIZED_MARKER = f"{output_path}reorganized.done"  # Marks the completion

rule all:
    input:
        FINAL_H5AD,
        FINAL_TOM,
        REORGANIZED_MARKER

rule wgcna_pipeline:
    output:
        H5AD_FILE,
        TOM_FILE,
        directory(FIGURES_DIR)
    run:
        import PyWGCNA
        import wgcna.utils as rutils

        rutils.create_dir(output_path)
        count_df = rutils.transform_count_matrix(count_matrix)
        if reduce_matrix:
            count_df = rutils.remove_random_columns(count_df, percentage=0.9)
        count_df.to_csv(MATRIX_FILE, index=False)

        pyWGCNA_obj = PyWGCNA.WGCNA(
            name=name, 
            species=species, 
            geneExpPath=MATRIX_FILE, 
            outputPath=output_path,
            figureType=figure_type,
            save=True
        )
        pyWGCNA_obj.updateSampleInfo(path=sample_mapping, sep='\t')

        pyWGCNA_obj.preprocess()
        pyWGCNA_obj.findModules()

        rutils.add_combined_column(pyWGCNA_obj.datExpr, drop_others=True)
        pyWGCNA_obj.setMetadataColor(
            "Combined_Trait", 
            rutils.generate_stage_color_dict(
                custom_stages=pyWGCNA_obj.datExpr.obs["Combined_Trait"].unique().tolist()
            )
        )

        pyWGCNA_obj.analyseWGCNA(show=False)

        # Process GO terms and IPR
        gaf_path = goid if goid.endswith(".gaf.gz") else None
        ortho_file = orthogroups if orthogroups.endswith(".tsv") else None

        if not gaf_path and goid.endswith(".tsv"):
            rutils.add_go_terms_to_adata(pyWGCNA_obj.datExpr, goid)

        if iprid:
            rutils.add_ipr_columns(pyWGCNA_obj.datExpr, iprid)

        rutils.prepare_and_save_wgcna(
            pyWGCNA_obj, 
            output_path, 
            gaf_path=gaf_path, 
            ortho_file=ortho_file, 
            save_tom=save_tom, 
            save_adjacency_matrix=save_adjacency_matrix, 
            save_WGCNA=save_WGCNA
        )

rule reorganize_outputs:
    """
    Reorganize and rename the generated files, and copy the figures to the app.
    Creates a 'reorganized.done' file as a marker.
    """
    input:
        H5AD_FILE,
        TOM_FILE,
        directory(FIGURES_DIR)
    output:
        FINAL_H5AD,
        FINAL_TOM,
        REORGANIZED_MARKER
    run:
        import shutil

        # Create target directories
        os.makedirs(H5AD_PATH, exist_ok=True)
        os.makedirs(TOM_PATH, exist_ok=True)

        # Move h5ad
        shutil.move(H5AD_FILE, FINAL_H5AD)

        # Rename and move tom
        shutil.move(TOM_FILE, FINAL_TOM)

        # Copy figures to the app
        images_dir = os.path.join(app_path, "app", "static", "images", name)
        os.makedirs(images_dir, exist_ok=True)

        for f in os.listdir(FIGURES_DIR):
            src = os.path.join(FIGURES_DIR, f)
            if os.path.isfile(src):
                shutil.copy(src, images_dir)

        # Create marker file
        with open(output[2], 'w') as marker:
            marker.write("Reorganization done.\n")
