###############################################################################
# Snakefile for CoExPlore pipeline
###############################################################################

import os
import sys
import matplotlib.pyplot as plt

configfile: "config.yml"

# Plotting settings
plt.rcParams['savefig.bbox'] = 'tight'
plt.rcParams['axes.labelsize'] = 10

# Extract dataset information from config file
species_list = config["species"]
names_list = config["name"]
count_matrix_list = config["count_matrix"]
sample_mapping_list = config["sample_mapping"]

# Check if all lists have the same number of entries
if not (len(species_list) == len(names_list) == len(count_matrix_list) == len(sample_mapping_list)):
    raise ValueError("All lists (species, name, count_matrix, sample_mapping) must have the same number of entries.")

# Check if lists are not empty
if len(species_list) == 0:
    raise ValueError("The lists (species, name, count_matrix, sample_mapping) must not be empty.")

# Optional metadata from config
iprid_list = config.get("iprid", [""] * len(names_list))
goid_list = config.get("goid", [""] * len(names_list))
orthogroups = config.get("orthogroups", "")

# New metadata parameters for pfam, uniprot, and tf_family
pfam_list = config.get("pfam", [""] * len(names_list))
uniprot_list = config.get("uniprot", [""] * len(names_list))
tf_family_list = config.get("tf_family", [""] * len(names_list))

# WGCNA parameters 
wgcna_params = config.get("wgcna_parameters", {})
TPMcutoff = wgcna_params.get("TPMcutoff", 1)
powers = wgcna_params.get("powers", None)
RsquaredCut = wgcna_params.get("RsquaredCut", 0.9)
MeanCut = wgcna_params.get("MeanCut", 100)
networkType = wgcna_params.get("networkType", "signed hybrid")
TOMType = wgcna_params.get("TOMType", "signed")
minModuleSize = wgcna_params.get("minModuleSize", 50)
naColor = wgcna_params.get("naColor", "grey")
cut = float(wgcna_params.get("cut", float("inf")))
MEDissThres = wgcna_params.get("MEDissThres", 0.2)

# Boolean or single-value entries from config
save_tom = config["save_tom"]
save_adjacency_matrix = config["save_adjacency_matrix"]
save_WGCNA = config["save_WGCNA"]
figure_type = config["figure_type"]
reduce_matrix = config["reduce_matrix"]

# Paths from config
output_path = config["output_path"]
app_path = config["app_path"]

# Ensure our output_path has a trailing slash
if not output_path.endswith("/"):
    output_path += "/"

# Subfolders (same for all datasets):
H5AD_PATH = os.path.join(output_path, "h5ad/")
TOM_PATH = os.path.join(output_path, "tom/")

###############################################################################
# Rule ALL: collects final outputs for all datasets
###############################################################################
rule all:
    input:
        expand(H5AD_PATH + "{name}.h5ad", name=names_list),
        expand(TOM_PATH + "tom_matrix_{name}.h5", name=names_list),
        expand(output_path + "{name}/reorganized.done", name=names_list)

###############################################################################
# Rule WGCNA_PIPELINE: main processing for each dataset
###############################################################################
rule wgcna_pipeline:
    input:
        count_matrix = lambda wc: count_matrix_list[names_list.index(wc.name)],
        sample_mapping = lambda wc: sample_mapping_list[names_list.index(wc.name)],
        iprid = lambda wc: iprid_list[names_list.index(wc.name)] if iprid_list[names_list.index(wc.name)] != "" else [],
        goid = lambda wc: goid_list[names_list.index(wc.name)] if goid_list[names_list.index(wc.name)] != "" else [],
        pfam = lambda wc: pfam_list[names_list.index(wc.name)] if pfam_list[names_list.index(wc.name)] != "" else [],
        uniprot = lambda wc: uniprot_list[names_list.index(wc.name)] if uniprot_list[names_list.index(wc.name)] != "" else [],
        tf_family = lambda wc: tf_family_list[names_list.index(wc.name)] if tf_family_list[names_list.index(wc.name)] != "" else []
    output:
        H5AD_FILE = output_path + "{name}/{name}.h5ad",
        TOM_FILE = output_path + "{name}/tom_matrix.h5",
        FIGURES_DIR = directory(output_path + "{name}/figures")
    run:
        import PyWGCNA
        import wgcna.utils as rutils

        idx = names_list.index(wildcards.name)
        sp = species_list[idx]
        nm = names_list[idx]
        cnt_matrix = input.count_matrix
        smpl_map = input.sample_mapping

        # If iprid or goid are not present, pass empty strings
        ipr = input.iprid if input.iprid else ""
        go = input.goid if input.goid else ""

        # Create output directory for intermediate files
        rutils.create_dir(os.path.dirname(output.H5AD_FILE))

        # Transform count matrix
        count_df = rutils.transform_count_matrix(cnt_matrix)

        # Optionally reduce matrix
        if reduce_matrix:
            count_df = rutils.remove_random_columns(count_df, percentage=0.9)

        # Write intermediate CSV for PyWGCNA
        MATRIX_FILE = f"{output_path}{nm}/{nm}_matrix.csv"
        count_df.to_csv(MATRIX_FILE, index=False)

        # Initialize PyWGCNA
        pyWGCNA_obj = PyWGCNA.WGCNA(
            name=nm,
            species=sp,
            geneExpPath=MATRIX_FILE,
            outputPath=f"{output_path}{nm}/",
            figureType=figure_type,
            save=True,
            TPMcutoff=TPMcutoff,
            powers=powers,
            RsquaredCut=RsquaredCut,
            MeanCut=MeanCut,
            networkType=networkType,
            TOMType=TOMType,
            minModuleSize=minModuleSize,
            naColor=naColor,
            cut=cut,
            MEDissThres=MEDissThres
        )
        pyWGCNA_obj.updateSampleInfo(path=smpl_map, sep='\t')

        # Run preprocessing and WGCNA
        pyWGCNA_obj.preprocess()
        pyWGCNA_obj.findModules()

        # Add combined column and set color metadata
        rutils.add_combined_column(pyWGCNA_obj.datExpr, drop_others=True)
        pyWGCNA_obj.setMetadataColor(
            "Combined_Trait", 
            rutils.generate_stage_color_dict(
                custom_stages=pyWGCNA_obj.datExpr.obs["Combined_Trait"].unique().tolist()
            )
        )

        # Perform analysis
        pyWGCNA_obj.analyseWGCNA(show=False)

        # Determine if a .gaf.gz file was provided for GO terms
        gaf_path = go if go.endswith((".gaf.gz", ".gaf")) else None
        ortho_file = orthogroups if orthogroups.endswith(".tsv") else None

        # If GO is a .tsv file, add GO terms
        if not gaf_path and go.endswith(".tsv"):
            rutils.add_go_terms_to_adata(pyWGCNA_obj.datExpr, go)

        # If ipr file is provided, add InterPro IDs
        if ipr:
            rutils.add_ipr_columns(pyWGCNA_obj.datExpr, ipr)

        # If pfam file is provided, add PFAM columns
        if input.pfam:
            rutils.add_pfam_columns(pyWGCNA_obj.datExpr, input.pfam)

        # If uniprot file is provided, add Uniprot metadata
        if input.uniprot:
            rutils.add_metadata_uniprot(pyWGCNA_obj.datExpr, input.uniprot)

        # If tf_family file is provided, add TF family column
        if input.tf_family:
            rutils.add_tf_columns(pyWGCNA_obj.datExpr, input.tf_family)

        # Final saving depending on configuration
        rutils.prepare_and_save_wgcna(
            pyWGCNA_obj, 
            f"{output_path}{nm}/", 
            gaf_path=gaf_path, 
            ortho_file=ortho_file, 
            save_tom=save_tom, 
            save_adjacency_matrix=save_adjacency_matrix, 
            save_WGCNA=save_WGCNA
        )

###############################################################################
# Rule REORGANIZE_OUTPUTS: move/rename final files to consistent locations
###############################################################################
rule reorganize_outputs:
    input:
        H5AD_FILE = output_path + "{name}/{name}.h5ad",
        TOM_FILE = output_path + "{name}/tom_matrix.h5",
        FIGURES_DIR = output_path + "{name}/figures"
    output:
        FINAL_H5AD = H5AD_PATH + "{name}.h5ad",
        FINAL_TOM = TOM_PATH + "tom_matrix_{name}.h5",
        REORGANIZED_MARKER = output_path + "{name}/reorganized.done"
    run:
        import shutil

        # Create target directories if needed
        os.makedirs(os.path.dirname(output.FINAL_H5AD), exist_ok=True)
        os.makedirs(os.path.dirname(output.FINAL_TOM), exist_ok=True)

        # Move the H5AD file into the final "h5ad" folder
        shutil.move(input.H5AD_FILE, output.FINAL_H5AD)

        # Move the TOM file into the final "tom" folder
        shutil.move(input.TOM_FILE, output.FINAL_TOM)

        # Copy figures to the application's static images folder
        images_dir = os.path.join(app_path, "app", "static", "images", wildcards.name)
        os.makedirs(images_dir, exist_ok=True)
        for f in os.listdir(input.FIGURES_DIR):
            src = os.path.join(input.FIGURES_DIR, f)
            if os.path.isfile(src):
                shutil.copy(src, images_dir)

        # Finally, write the reorganized marker file
        with open(output.REORGANIZED_MARKER, 'w') as marker:
            marker.write("Reorganization done.\n")
